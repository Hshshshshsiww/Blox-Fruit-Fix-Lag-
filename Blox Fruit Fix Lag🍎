LS1bWwoJV0FSTklORzogSGVhZHMgdXAhIFRoaXMgc2NyaXB0IGhhcyBub3QgYmVlbiB2ZXJpZmllZCBieSBTY3JpcHRCbG94LiBVc2UgYXQgeW91ciBvd24gcmlzayEKXV0KZ2FtZTpHZXRTZXJ2aWNlKCJTdGFydGVyR3VpIik6U2V0Q29yZSgiU2VuZE5vdGlmaWNhdGlvbiIsewpUaXRsZSA9ICKUObc2QmxveCBGcnVpdCBGaXggTGFnlDm3NiIsClRleHQgPSAiY3JlYXRlIGJ5IGxrXzcyOSIsIApEdXJhdGlvbiA9IDMKfSkKLS0gVIE1/jVvIEdVSSCBMI00gTaDOSBoaYE2gzluIHRogTaENyBGUFMKbG9jYWwgU2NyZWVuR3VpID0gSW5zdGFuY2UubmV3KCJTY3JlZW5HdWkiKQpsb2NhbCBUZXh0TGFiZWwgPSBJbnN0YW5jZS5uZXcoIlRleHRMYWJlbCIpCmxvY2FsIFRvZ2dsZUJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpCgotLSCBMI0zgTaCN3QgdKi6biB2qKQgYoE2hTMgY4E2hzNjIGNobyBHVUkKU2NyZWVuR3VpLk5hbWUgPSAiRlBTRGlzcGxheSIKU2NyZWVuR3VpLlBhcmVudCA9IGdhbWU6R2V0U2VydmljZSgiQ29yZUd1aSIpCgpUZXh0TGFiZWwuUGFyZW50ID0gU2NyZWVuR3VpClRleHRMYWJlbC5TaXplID0gVURpbTIubmV3KDAsIDEwMCwgMCwgMzApClRleHRMYWJlbC5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAxMCwgMCwgMTApClRleHRMYWJlbC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMC41ClRleHRMYWJlbC5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLm5ldygwLCAwLCAwKQpUZXh0TGFiZWwuVGV4dFNpemUgPSAxNApUZXh0TGFiZWwuVGV4dENvbG9yMyA9IENvbG9yMy5uZXcoMSwgMSwgMSkKVGV4dExhYmVsLlRleHRTdHJva2VUcmFuc3BhcmVuY3kgPSAwLjUKVGV4dExhYmVsLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKVGV4dExhYmVsLlRleHQgPSAiRlBTOiBDYWxjdWxhdGluZy4uLiIKClRvZ2dsZUJ1dHRvbi5QYXJlbnQgPSBTY3JlZW5HdWkKVG9nZ2xlQnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMCwgMTAwLCAwLCAzMCkKVG9nZ2xlQnV0dG9uLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDEwLCAwLCA1MCkKVG9nZ2xlQnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMubmV3KDAuMiwgMC4yLCAwLjIpClRvZ2dsZUJ1dHRvbi5UZXh0Q29sb3IzID0gQ29sb3IzLm5ldygxLCAxLCAxKQpUb2dnbGVCdXR0b24uVGV4dCA9ICJGaXggTGFnIE9GRiIKVG9nZ2xlQnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKVG9nZ2xlQnV0dG9uLlRleHRTaXplID0gMTQKCi0tIEJpgTaDNW4gdHKBNf41bmcgdGioomkKbG9jYWwgaXNMYWdGaXhFbmFibGVkID0gZmFsc2UKCi0tIEJpgTaDNW4ggTCNNIE2gzkgdKiqbmggRlBTCmxvY2FsIGxhc3RUaW1lID0gdGljaygpCmxvY2FsIGZyYW1lQ291bnQgPSAwCgotLSBDgTaBN3AgbmiBNoE3dCBGUFMKZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikuUmVuZGVyU3RlcHBlZDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgIGZyYW1lQ291bnQgPSBmcmFtZUNvdW50ICsgMQogICAgbG9jYWwgY3VycmVudFRpbWUgPSB0aWNrKCkKICAgIGlmIGN1cnJlbnRUaW1lIC0gbGFzdFRpbWUgPj0gMSB0aGVuCiAgICAgICAgbG9jYWwgZnBzID0gZnJhbWVDb3VudCAvIChjdXJyZW50VGltZSAtIGxhc3RUaW1lKQogICAgICAgIFRleHRMYWJlbC5UZXh0ID0gc3RyaW5nLmZvcm1hdCgiRlBTOiAlLjBmIiwgZnBzKQogICAgICAgIGZyYW1lQ291bnQgPSAwCiAgICAgICAgbGFzdFRpbWUgPSBjdXJyZW50VGltZQogICAgZW5kCmVuZCkKCi0tIFNjcmlwdCBnaYE1/jdtIGxhZyBogTaHMXAgcGioonAgdHJvbmcgUm9ibG94CmxvY2FsIFBsYXllcnMgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKQpsb2NhbCBMaWdodGluZyA9IGdhbWU6R2V0U2VydmljZSgiTGlnaHRpbmciKQoKbG9jYWwgZnVuY3Rpb24gb3B0aW1pemVHcmFwaGljcygpCiAgICBMaWdodGluZy5HbG9iYWxTaGFkb3dzID0gZmFsc2UKICAgIExpZ2h0aW5nLkZvZ0VuZCA9IDEwMDAwMAogICAgTGlnaHRpbmcuQnJpZ2h0bmVzcyA9IDIKICAgIExpZ2h0aW5nLk91dGRvb3JBbWJpZW50ID0gQ29sb3IzLm5ldygxLCAxLCAxKQoKICAgIGZvciBfLCBwYXJ0IGluIHBhaXJzKHdvcmtzcGFjZTpHZXREZXNjZW5kYW50cygpKSBkbwogICAgICAgIGlmIHBhcnQ6SXNBKCJCYXNlUGFydCIpIHRoZW4KICAgICAgICAgICAgcGFydC5NYXRlcmlhbCA9IEVudW0uTWF0ZXJpYWwuU21vb3RoUGxhc3RpYwogICAgICAgICAgICBwYXJ0LkNhc3RTaGFkb3cgPSBmYWxzZQogICAgICAgIGVsc2VpZiBwYXJ0OklzQSgiUGFydGljbGVFbWl0dGVyIikgb3IgcGFydDpJc0EoIlRyYWlsIikgdGhlbgogICAgICAgICAgICBwYXJ0LkVuYWJsZWQgPSBmYWxzZQogICAgICAgIGVsc2VpZiBwYXJ0OklzQSgiRGVjYWwiKSBvciBwYXJ0OklzQSgiVGV4dHVyZSIpIHRoZW4KICAgICAgICAgICAgcGFydC5UcmFuc3BhcmVuY3kgPSAwLjUKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGxvY2FsIHBsYXllciA9IFBsYXllcnMuTG9jYWxQbGF5ZXIKICAgIGlmIHBsYXllci5DaGFyYWN0ZXIgdGhlbgogICAgICAgIGZvciBfLCBvYmogaW4gcGFpcnMocGxheWVyLkNoYXJhY3RlcjpHZXREZXNjZW5kYW50cygpKSBkbwogICAgICAgICAgICBpZiBvYmo6SXNBKCJQYXJ0aWNsZUVtaXR0ZXIiKSBvciBvYmo6SXNBKCJUcmFpbCIpIHRoZW4KICAgICAgICAgICAgICAgIG9iai5FbmFibGVkID0gZmFsc2UKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiByZXNldEdyYXBoaWNzKCkKICAgIExpZ2h0aW5nLkdsb2JhbFNoYWRvd3MgPSB0cnVlCiAgICBMaWdodGluZy5Gb2dFbmQgPSAxMDAwCiAgICBMaWdodGluZy5CcmlnaHRuZXNzID0gMQogICAgTGlnaHRpbmcuT3V0ZG9vckFtYmllbnQgPSBDb2xvcjMubmV3KDAuNSwgMC41LCAwLjUpCgogICAgZm9yIF8sIHBhcnQgaW4gcGFpcnMod29ya3NwYWNlOkdldERlc2NlbmRhbnRzKCkpIGRvCiAgICAgICAgaWYgcGFydDpJc0EoIkJhc2VQYXJ0IikgdGhlbgogICAgICAgICAgICBwYXJ0Lk1hdGVyaWFsID0gRW51bS5NYXRlcmlhbC5QbGFzdGljCiAgICAgICAgICAgIHBhcnQuQ2FzdFNoYWRvdyA9IHRydWUKICAgICAgICBlbHNlaWYgcGFydDpJc0EoIlBhcnRpY2xlRW1pdHRlciIpIG9yIHBhcnQ6SXNBKCJUcmFpbCIpIHRoZW4KICAgICAgICAgICAgcGFydC5FbmFibGVkID0gdHJ1ZQogICAgICAgIGVsc2VpZiBwYXJ0OklzQSgiRGVjYWwiKSBvciBwYXJ0OklzQSgiVGV4dHVyZSIpIHRoZW4KICAgICAgICAgICAgcGFydC5UcmFuc3BhcmVuY3kgPSAwCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBsb2NhbCBwbGF5ZXIgPSBQbGF5ZXJzLkxvY2FsUGxheWVyCiAgICBpZiBwbGF5ZXIuQ2hhcmFjdGVyIHRoZW4KICAgICAgICBmb3IgXywgb2JqIGluIHBhaXJzKHBsYXllci5DaGFyYWN0ZXI6R2V0RGVzY2VuZGFudHMoKSkgZG8KICAgICAgICAgICAgaWYgb2JqOklzQSgiUGFydGljbGVFbWl0dGVyIikgb3Igb2JqOklzQSgiVHJhaWwiKSB0aGVuCiAgICAgICAgICAgICAgICBvYmouRW5hYmxlZCA9IHRydWUKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgotLSBUgTaBOXQvQoE2gTd0IGZpeCBsYWcga2hpIG5ogTX+OW4gbqiydApUb2dnbGVCdXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICBpc0xhZ0ZpeEVuYWJsZWQgPSBub3QgaXNMYWdGaXhFbmFibGVkCgogICAgaWYgaXNMYWdGaXhFbmFibGVkIHRoZW4KICAgICAgICBvcHRpbWl6ZUdyYXBoaWNzKCkKICAgICAgICBUb2dnbGVCdXR0b24uVGV4dCA9ICJGaXggTGFnIE9OIgogICAgZWxzZQogICAgICAgIHJlc2V0R3JhcGhpY3MoKQogICAgICAgIFRvZ2dsZUJ1dHRvbi5UZXh0ID0gIkZpeCBMYWcgT0ZGIgogICAgZW5kCmVuZCk=
